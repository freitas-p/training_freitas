---
title: "Cleaning and wrangling"
format: html
---

```{r}
#We will start by ignoring the warning messages getting there
#| message: false

#Let's load the packages

library(dplyr)
library(tidyr)
library(readr)

```

##Read in our data

```{r}

catch_original <- read_csv("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1")

```

##Let's explore the data

```{r}

colnames(catch_original)

head(catch_original, 15)

summary(catch_original)

unique(catch_original$Region)

plot(catch_original)

```

#Now we will clean and reshape the data

%>% 

#We will use the select column to select the columns we want to keep in the dataset

```{r}

catch_data <- catch_original %>% 
  select(Region, Year, Chinook, Sockeye, Coho, Pink, Chum)

head(catch_data)

#Let's do the same with a differnt approach

catch_data <- catch_original %>% 
  select(-All, -notesRegCode)

head(catch_data)

```

#Let's check column types

```{r}

glimpse(catch_data)

#We can see that Chinook is not numeric, but string... so we gotta fix that!

```

#Replace values in a column

```{r}

#We will replace the obsrvation to number

catch_clean <- catch_data %>% 
  mutate(Chinook = as.numeric(Chinook))

```

#Let's find the NA values

```{r}

is.na(catch_clean)

i <- which(is.na(catch_clean$Chinook))
i

catch_data[i, ]

#We will see that instead of a 1 we have a I and here is the error, let's fix it!

catch_clean <- catch_data %>% 
  mutate(Chinook = if_else(condition = Chinook == "I",
                           true = "1",
                           false = Chinook),
         Chinook = as.numeric(Chinook))

#Now we will see that the error is cleaned!

catch_clean[i,]

```

#Reshaping

```{r}

catch_long <- catch_clean %>% 
  pivot_longer(cols = -c(Region, Year),
               names_to = "species",
               values_to = "catch")

head(catch_long)

```

#Rename_columns

```{r}

catch_long <- catch_long %>% 
  rename(catch_thousands = catch)
head(catch_long)

```

```{r}

catch_long <- catch_long %>% 
  mutate(catch = catch_thousands * 1000)

head(catch_long)
```

##Summarry stats using group_by() and summarize(). We will want to get average catch by reason 

```{r}

#We wil get the average catch by region

mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarise(mean_catch = mean(catch))

head(mean_region)

```

```{r}
#Number of rows for each group

n_region <- catch_long %>% 
  group_by(Region) %>% 
  summarise(n = n())

head(n_region)

```

##Filtering rows using filter()

```{r}

sse_catch <- catch_long %>% 
  filter(Region == "SSE")

head(sse_catch)

```

```{r}

catch_million <- catch_long %>% 
  filter(catch > 10000000)

head(catch_million)
```

```{r}

Chinook_sse = catch_long %>%
  filter(Region == "SSE", 
         species == "Chinook")

head(Chinook_sse)

```

#Sorting data using arrange()

```{r}

mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarise(mean_catch = mean(catch)) %>% 
  arrange(mean_catch)

head(mean_region)

```

#We will sort the previous descend

```{r}

mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarise(mean_catch = mean(catch)) %>% 
  arrange(desc(mean_catch))

head(mean_region)

```

#We will now spliting and combining values in columns

```{r}

sites_df <- data.frame(site = c("HAW-101",
                                "HAW-103",
                                "OAH-320",
                                "OAH-219",
                                "MAU-039"))

head(sites_df)

split_df <- sites_df %>% 
  separate(site, c("island", "site_number"), "-")

head(split_df)

```

```{r}

cities_df <- data.frame(city = c("Juena AK",
                                 "Sitka AK",
                                 "Anchorage AK"))

cities_df <- cities_df %>% 
  separate(city, c("city", "state_code"), " ")

```

```{r}

date_df <- data.frame(
  year = c("1930", "1930", "1930"),
  month = c("12", "12", "12"),
  day = c("14", "15", "16")
)

head(date_df)

dates_unite <- date_df %>% 
  unite(date, year, month, day, sep = "-")

head(dates_unite)

```

